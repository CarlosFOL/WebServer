from datetime import datetime
from .http_request import HTTPRequest
import os


class HTTPResponse:
    """Web Server Response
    
    The browser's request is examined and if everything is in order,
    the requested resource is sent.
    
    Attributes
    ----------
    request: HTTPRequest
        Object of the HTTP request type. 
    """

    def __init__(self, request: HTTPRequest) -> None:
        self.request = request
        self.v_http = 'HTTP/1.0'
        self.statement_line = None # e.g 200 OK, 404 Not Found, 400 Bad Request, ...
        # Headers to include in the response:
        self.headers = {'Date': datetime.now().strftime("%a, %d %b %Y %H:%M:%S %Z"),
                        'Server': request.host 
                        }
        self.headers.update({header: None for header in 
                             ['Content-Length', 'Content-Type', 'Last-Modified']})
        
        
    def file_extension(self) -> str:
        "Identifies the format of the requested resource"
        extension = self.request.url.split('.')[-1]
        content_types = {
        'html': 'text/html', 'txt': 'text/plain',
        'gif': 'image/gif', 'jpg':'image/jpeg'
            }
        return content_types.get(extension, 'application/octet-stream')
    
    
    def process_response(self, path: str, file: bytes) -> bytes:
        """Processing of the HTTP response
        
        The HTTP response is created by including the relevant fields,
        and the referenced object is encapsulated in the message
        if necessary.
        """
        self.headers['Content-Length'] = os.path.getsize(path)
        if self.statement_line == '200 OK':
            self.headers['Content-Type'] = self.file_extension()
            self.headers['Last-Modified'] = datetime.fromtimestamp(os.path.getmtime(path)).strftime("%a, %d %b %Y %H:%M:%S %Z")
        else:
            # The exception file extension
            self.headers['Content-Type'] = 'text/html' 
        response = f'{self.v_http} {self.statement_line}\n'.encode('UTF-8')
        for header, val in self.headers.items():
            if val !=  None: # To avoid sending the Last-Modfied header when sending the exception file.
                response += f'{header}: {val}\n'.encode('UTF-8')                
        if self.request.method != 'HEAD':
            response += b'\n' + file # blank line + object
        return response

    
    def get_file(self, path: str) -> bytes | None:
        """Loading of the requested object.
        
        Attempts to search for the 
        object referenced by the browser in memory.
        """
        try:
            with open(path, 'rb') as f:
                file_content = f.read()
            return file_content
        except:
            return None

    
    def get_response(self) -> bytes:
        """Get the HTTP response
        
        Returns the response message generated by the server
        once the fields that make up the request have been examined.
        """
        path = f'Objects/{self.request.url[1:]}'
        file = self.get_file(path)
        if self.request.is_valid_method() and file != None:
            self.statement_line = '200 OK'
            response = self.process_response(path, file)
        else: # Exceptions
            if self.request.is_valid_method():
                self.statement_line = '404 Not Found'
            else:
                self.statement_line = '400 Bad Request'
            f_ex = FileException(self.statement_line)            
            response = self.process_response(f_ex.path, f_ex.get_file())
        return response
    
    
    def __str__(self) -> str:
        """HTTP response message
        
        Prints the HTTP response message processed by the Web server
        in text format. In addition, the decoding of objects in image format (gif or jpg) 
        is treated specially.
        """
        try:
            http_response = self.get_response().decode('UTF-8')
        except UnicodeDecodeError:
            # Isolate the bytes of the image object (gif or jpg) 
            http_response = self.get_response().split(b'\n\n')[0].decode('UTF-8')
            http_response += f'\n\n<img/{self.file_extension()}>'
        return http_response
            
            

class FileException:
    """HTML exception file.
    
    File generated exclusively when the request was not 
    well-formed (status code: 400) or if the referenced object 
    was not found in memory (status code: 404).
    
    Attribute
    ---------
    statement_line: str
        Exception status line: 400 Bad Request | 404 Not Found
    """
    
    def __init__(self, statement_line: str):
        self.path = 'file_exception.html'
        self.content = f"""<!DOCTYPE html>
<html>

<head><title>Exception</title></head>
<body>
<h1>{statement_line}</h1>
</body>

</html>"""
    
    
    def get_file(self) -> bytes:
        """Get the file
        
        The exception file is generated, 
        stored in the Web Server's objects directory, 
        and its content is delivered.
        """
        with open(self.path, 'w') as f:
            f.write(self.content)
        return self.content.encode('UTF-8')